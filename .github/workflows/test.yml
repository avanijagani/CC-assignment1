name: Auto Sync with Main Branch

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto-sync:
    name: Auto Sync with Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Fetch all branches
        run: git fetch --all

      - name: Delete bot-created branches
        run: | 
          echo "Finding all branches created by the bot..."
          BOT_BRANCHES=$(git branch -r | grep -E 'origin/feature/.*-sync-with-main-created-by-bot')
          echo "Bot-created branches"
          if [ -z "$BOT_BRANCHES" ]; then
            echo "No bot-created branches found."
          else
            echo "Bot-created branches found:"
            echo "$BOT_BRANCHES"   
          fi          

      - name: Get active Epic branches
        id: get_active_epic_branches
        run: |
          current_date=$(date +%s)
          one_week_ago=$(date -d '1 week ago' +%s)

          branches=()

          echo "Script Log: Listing all remote branches that start with 'feature/main/' and checking their last commit date..."
          EPIC_BRANCHES=$(git for-each-ref --sort=-committerdate refs/remotes/ --format='%(refname:short)' | grep '^origin/feature/main/')
          echo "Script log: Branches updated within the last week:"
          for branch in $EPIC_BRANCHES; do
            commit_date=$(git log -1 --format=%ct $branch)
            if [ $commit_date -ge $one_week_ago ]; then    
              branches+=("$branch")
              echo "$branch"
            fi
          done

          echo "active_branches=${branches[@]}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get latest changes from main
        run: |
          git checkout main
          git pull origin main
          echo "Script log: Pulled latest changes from main"

      - name: Create PRs for active epic branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "digital-releases@bunnings.com.au"
          git config --global user.name "Digital Releases"

          ACTIVE_EPIC_BRANCH=(${{ steps.get_active_epic_branches.outputs.active_branches }})
          for branch in "${ACTIVE_EPIC_BRANCH[@]}"; do
            echo "Script log: Processing epic branch: $branch"
            ACTIVE_EPIC_BRANCH=${branch#origin/}
            git checkout $ACTIVE_EPIC_BRANCH
            git pull origin $ACTIVE_EPIC_BRANCH
            echo "Script log: Pulled latest changes from branch: $ACTIVE_EPIC_BRANCH"
           
            echo "Script log: Creating temp branch to sync with main"
            TEMP_EPIC_BRANCH=$(echo "$ACTIVE_EPIC_BRANCH" | sed 's|^feature/main/|feature/|' | sed 's|$|-sync-with-main-created-by-bot|')
            git checkout -b $TEMP_EPIC_BRANCH
            echo "Script log: Checked out new branch: $TEMP_EPIC_BRANCH"
            git push --set-upstream origin $TEMP_EPIC_BRANCH
            echo "Script log: Created temp branch: $TEMP_EPIC_BRANCH"

            if git merge main; then
              echo "Script log: Merge successful, pushing changes"
              git push origin $TEMP_EPIC_BRANCH
              echo "Script log: Pushed changes to branch: $TEMP_EPIC_BRANCH"
              git pull origin $TEMP_EPIC_BRANCH
              echo "Script log: Pulled changes from branch: $TEMP_EPIC_BRANCH"
              git checkout $ACTIVE_EPIC_BRANCH
              echo "Script log: Checked out branch: $ACTIVE_EPIC_BRANCH"
              git pull origin $ACTIVE_EPIC_BRANCH
              echo "Script log: Pulled changes from branch: $ACTIVE_EPIC_BRANCH"
              git merge $TEMP_EPIC_BRANCH
              echo "Script log: Merged changes to branch: $ACTIVE_EPIC_BRANCH"
              git push origin $ACTIVE_EPIC_BRANCH
            else
              echo "Script log: Merge conflict detected, aborting merge"
              git merge --abort
              echo "Script log: Creating PR to resolve conflicts for branch: $TEMP_EPIC_BRANCH"
            fi
               
          done
